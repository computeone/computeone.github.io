**双线性过滤**（Bilinear filtering）是进行缩放显示的时候进行纹理平滑的一种纹理过滤方法。 在大多数情况下，纹理在屏幕上显示的时候都不会同保存的纹理一模一样，没有任何损失。正因为这样，所以一些像素要使用纹素之间的点进行表示，在这里我们假设纹素都是位于各个单元中心或者左上或者其它位置的点。双线性过滤器利用像素所表示点周围四个最近的点（纹素点）之间进行双线性插值。\\
\\
 如图，已知Q12，Q22，Q11，Q21，但是要插值的点为P点，这就要用双线性插值了，首先在x轴方向上，对R1和R2两个点进行插值，这个很简单，然后根据R1和R2对P点进行插值，这就是所谓的双线性插值。\\
\\
{{:graphic:texture_filtering:bilinear_.png|}}\\
\\
在下面这些方程中，uk 与 vk 是纹理坐标，yk 是点 k 处的颜色值。不带下标的值表示像素点，带有下标 0、1、2、3 的值表示从左上沿顺时针方向到左下包围像素的纹素点，这就是线性插值方程。由于双线性方程是线性插值方程的一种特殊形式，所以 我们从较简单的线性插值方程开始分析。\\
{{:graphic:texture_filtering:bilinear1.png|}}\\
\\
**局限**\\
\\
在纹理缩减到一半或者放大一倍的范围内，双线性过滤都能够有非常好的精度。这也就是说，如果纹理在每个方向都有 256 个像素，那么将它缩减到 128 以下或者放大到 512 以上的时候，由于会丢掉太多的像素或者进行了过多的平滑处理，纹理看起来就会很差。通常，可以在缩减的过程中使用 Mipmap 来实现较好的性能；但是，在透视图中的纹理上的经过双线性过滤处理的两个不同尺寸的 mipmap 之间的过渡将非常明显。三线性过滤尽管比较复杂，但是可以使得过渡非常平滑。
为了快速说明纹理过滤中如何丢失纹素，这里有一组用来自于 8 纹素宽纹理的数字表示的盒子的中心，它们与蓝色表示的来自于 3 纹素宽的纹理表示的盒子中心的一组数字混杂在一起。红色数字表示计算 3 纹素纹理中根本不需要的纹素。
0.0625, 0.1667, 0.1875, 0.3125, 0.4375, 0.5000, 0.5625, 0.6875, 0.8125, 0.8333, 0.9375
