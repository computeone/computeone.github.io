**ASTC**中ARM研发的一种较新的贴图压缩格式，相对于上述几种方法具有较多的优势，其应该会慢慢成为之后移动设备上贴图压缩的主要标准和主流。其主要具有如下的特性：
  - 较高的灵活性；
  - 可变的压缩率；
  - 支持2d/3d贴图；
  - 适用于移动平台；
  - 支持LDR/HDR贴图内容；
ASTC同样是基于block的压缩方式，但块的大小却较支持多种尺寸，比如从基本的4x4到12x12，而且块的宽高也不限于pot，比如6x5；每个块内的内容用128bits来进行存储，因而不同的块就对应着不同的压缩率。\\
对于每个块，同样存储两个插值端点，称为endpoints，但是这里的endpoints不一定是基于颜色的（RGBA），也可以基于layer，比如对于R,G,B,A甚或其中的组合如RG等，这样的话就可以用来对normal map或alpha map进行更好的压缩；\\
对于块中的每个texel，存储其对应于endpoints的插件weight，但是存储的weight数量可以比texel少，特别是对于规格较大的块（比如12x12），这种情况下会首先对于每个texel通过线性插值得到其对就应的weight，然后再进行颜色的计算；\\
对于块内颜色分布较为复杂的情况，分析块内颜色的分布，然后做partition，对于每个partition进行分别的处理（与ETC2中将颜色分布对应到具体的预知分布模式中的处理方法不同），分别存储其对应的endpoints；这样一来对于块内的某个texel进行取值时就先定位其对应的partition，然后再计算在其在对应的小子块内的颜色。\\
块内信息的存储采用了BISE的方式来进行压缩，尽可能的节省对应的存储空间。比如对于一组5个表示范围已知的整型数值，采用BISE存储后可节省两个bits，这样就使用每个块内较大量的数据存储于128bits内成为可能；\\
对于单layer的一个block内的bits组织大概如下所示：\\
11bits: 存储weight, height, 以及特殊块的标识，比如void-extent等；\\
2bits: part数量；\\
4bits: 存储16种不同的endpoints的模式，比如是LDR或HDR，RGB或是RGBA；\\
111bit：其中存储endpoints，texel weight以及其它的配置信息，（注意，每种具体的存储大小是可变的，因其采用BISE进行压缩放置）；